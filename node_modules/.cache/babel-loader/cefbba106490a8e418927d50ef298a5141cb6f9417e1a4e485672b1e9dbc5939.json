{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const [animateUmanoide, setAnimateUmanoide] = useState(false); // Stato per controllare l'animazione dell'umanoide\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n    textureLoader.load(umanoideImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n      });\n      const umanoideGeometry = new THREE.BoxGeometry(1.5, 1.5, 2);\n      const umanoide = new THREE.Mesh(umanoideGeometry, material);\n      umanoide.position.set(-3, -1, 0);\n      scene.add(umanoide);\n      umanoideRef.current = umanoide;\n    });\n\n    // Particelle, Luci, e il resto del setup della scena...\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Anima l'umanoide se animateUmanoide è true\n      if (animateUmanoide) {\n        if (umanoideRef.current.scale.x < 10) {\n          umanoideRef.current.scale.x += 0.1;\n          umanoideRef.current.scale.y += 0.1;\n          umanoideRef.current.scale.z += 0.1;\n          umanoideRef.current.position.lerp(new THREE.Vector3(0, 0, 0), 0.02);\n        }\n      } else {\n        // Rotazione standard dell'umanoide\n        umanoideRef.current.rotation.y += 0.01;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = event => {\n      const mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          setAnimateUmanoide(true); // Attiva l'animazione dell'umanoide\n          setTimeout(() => {\n            window.location.href = 'https://ia-liart-one.vercel.app/';\n          }, 2000); // Ritarda l'apertura del link di 2 secondi\n          break;\n        }\n      }\n    };\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"UpPI6UrSAmRvWZaXNuguxLKTc48=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","NeuralScene","isScrolled","_s","mountRef","umanoideRef","animateUmanoide","setAnimateUmanoide","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableZoom","textureLoader","TextureLoader","load","texture","material","MeshBasicMaterial","map","cubeGeometry","BoxGeometry","cube","Mesh","set","add","transparent","umanoideGeometry","umanoide","animate","requestAnimationFrame","scale","x","y","lerp","Vector3","rotation","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","onClick","event","mouse","Vector2","clientX","clientY","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","children","i","length","object","setTimeout","location","href","removeEventListener","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const [animateUmanoide, setAnimateUmanoide] = useState(false); // Stato per controllare l'animazione dell'umanoide\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n\n    textureLoader.load(umanoideImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({ map: texture, transparent: true });\n      const umanoideGeometry = new THREE.BoxGeometry(1.5, 1.5, 2);\n      const umanoide = new THREE.Mesh(umanoideGeometry, material);\n      umanoide.position.set(-3, -1, 0);\n      scene.add(umanoide);\n      umanoideRef.current = umanoide;\n    });\n\n    // Particelle, Luci, e il resto del setup della scena...\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Anima l'umanoide se animateUmanoide è true\n      if (animateUmanoide) {\n        if (umanoideRef.current.scale.x < 10) {\n          umanoideRef.current.scale.x += 0.1;\n          umanoideRef.current.scale.y += 0.1;\n          umanoideRef.current.scale.z += 0.1;\n          umanoideRef.current.position.lerp(new THREE.Vector3(0, 0, 0), 0.02);\n        }\n      } else {\n        // Rotazione standard dell'umanoide\n        umanoideRef.current.rotation.y += 0.01;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = (event) => {\n      const mouse = new THREE.Vector2(\n        (event.clientX / window.innerWidth) * 2 - 1,\n        -(event.clientY / window.innerHeight) * 2 + 1\n      );\n\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          setAnimateUmanoide(true); // Attiva l'animazione dell'umanoide\n          setTimeout(() => {\n            window.location.href = 'https://ia-liart-one.vercel.app/';\n          }, 2000); // Ritarda l'apertura del link di 2 secondi\n          break;\n        }\n      }\n    };\n\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]);\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}