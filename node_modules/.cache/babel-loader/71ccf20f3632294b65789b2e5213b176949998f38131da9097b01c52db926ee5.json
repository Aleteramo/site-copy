{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/Carosello.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Aggiungi useState qui\nimport { Link } from 'react-router-dom';\n\n// Assicurati che le immagini siano importate correttamente\nimport immagine1 from './immagini2/immagine1.jpg';\nimport immagine2 from './immagini2/immagine2.jpg';\nimport immagine3 from './immagini2/immagine3.jpg';\nimport immagine4 from './immagini2/immagine4.jpg';\nimport immagine5 from './immagini2/immagine5.jpg';\n\n// Definisci la variabile immagini come un array dei percorsi delle immagini importate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst immagini = [immagine1, immagine2, immagine3, immagine4, immagine5];\nconst Carosello = () => {\n  _s();\n  const [scrollY, setScrollY] = useState(0); // useState è ora importato correttamente\n\n  useEffect(() => {\n    const handleScroll = () => {\n      // Aggiorna scrollY solo se supera una certa soglia (es. 1000px)\n      if (window.scrollY > 1000) {\n        setScrollY(window.scrollY - 1000);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  const calculatePosition = index => {\n    // Definisci un punto di scroll oltre il quale il carosello inizia a muoversi\n    const startMovingPoint = 800; // Ad esempio, inizia a muoversi quando l'utente ha scrollato 800px\n    const movementSpeed = 0.5; // Velocità con cui le immagini si muovono rispetto allo scroll\n\n    // Calcola quanto l'utente ha scrollato oltre il punto di inizio\n    let scrollBeyondStart = Math.max(scrollY - startMovingPoint, 0);\n\n    // Utilizza un approccio diverso per calcolare la posizione finale delle immagini\n    // Questo esempio assume che ogni immagine si muova indipendentemente basandosi sullo scroll\n    let finalPosition = -(index * 100) - scrollBeyondStart * movementSpeed * index;\n    return finalPosition;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel-container\",\n    children: immagini.map((src, index) => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/dettaglio/${index}`,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: src,\n        alt: `Immagine ${index + 1}`,\n        style: {\n          transform: `translateX(${calculatePosition(index)}px)`\n        },\n        className: \"carosello-immagine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Carosello, \"eTR5W6wH45bVtWbD0ho0jkNrbDM=\");\n_c = Carosello;\nexport default Carosello;\nvar _c;\n$RefreshReg$(_c, \"Carosello\");","map":{"version":3,"names":["React","useState","useEffect","Link","immagine1","immagine2","immagine3","immagine4","immagine5","jsxDEV","_jsxDEV","immagini","Carosello","_s","scrollY","setScrollY","handleScroll","window","addEventListener","removeEventListener","calculatePosition","index","startMovingPoint","movementSpeed","scrollBeyondStart","Math","max","finalPosition","className","children","map","src","to","alt","style","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/Carosello.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Aggiungi useState qui\nimport { Link } from 'react-router-dom';\n\n// Assicurati che le immagini siano importate correttamente\nimport immagine1 from './immagini2/immagine1.jpg';\nimport immagine2 from './immagini2/immagine2.jpg';\nimport immagine3 from './immagini2/immagine3.jpg';\nimport immagine4 from './immagini2/immagine4.jpg';\nimport immagine5 from './immagini2/immagine5.jpg';\n\n// Definisci la variabile immagini come un array dei percorsi delle immagini importate\nconst immagini = [immagine1, immagine2, immagine3, immagine4, immagine5];\n\nconst Carosello = () => {\n  const [scrollY, setScrollY] = useState(0); // useState è ora importato correttamente\n\n  useEffect(() => {\n    const handleScroll = () => {\n      // Aggiorna scrollY solo se supera una certa soglia (es. 1000px)\n      if (window.scrollY > 1000) {\n        setScrollY(window.scrollY - 1000);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  const calculatePosition = (index) => {\n\n\n   // Definisci un punto di scroll oltre il quale il carosello inizia a muoversi\n   const startMovingPoint = 800; // Ad esempio, inizia a muoversi quando l'utente ha scrollato 800px\n   const movementSpeed = 0.5; // Velocità con cui le immagini si muovono rispetto allo scroll\n \n   // Calcola quanto l'utente ha scrollato oltre il punto di inizio\n   let scrollBeyondStart = Math.max(scrollY - startMovingPoint, 0);\n \n   // Utilizza un approccio diverso per calcolare la posizione finale delle immagini\n   // Questo esempio assume che ogni immagine si muova indipendentemente basandosi sullo scroll\n   let finalPosition = -(index * 100) - (scrollBeyondStart * movementSpeed * index);\n \n   return finalPosition;\n };\n\n  return (\n    <div className=\"carousel-container\">\n      {immagini.map((src, index) => (\n        <Link key={index} to={`/dettaglio/${index}`}>\n          <img\n            src={src}\n            alt={`Immagine ${index + 1}`}\n            style={{ transform: `translateX(${calculatePosition(index)}px)` }}\n            className=\"carosello-immagine\"\n          />\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default Carosello;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AACpD,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AACA,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,CAACP,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,CAAC;AAExE,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMc,YAAY,GAAGA,CAAA,KAAM;MACzB;MACA,IAAIC,MAAM,CAACH,OAAO,GAAG,IAAI,EAAE;QACzBC,UAAU,CAACE,MAAM,CAACH,OAAO,GAAG,IAAI,CAAC;MACnC;IACF,CAAC;IAEDG,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IAE/C,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,MAAMI,iBAAiB,GAAIC,KAAK,IAAK;IAGpC;IACA,MAAMC,gBAAgB,GAAG,GAAG,CAAC,CAAC;IAC9B,MAAMC,aAAa,GAAG,GAAG,CAAC,CAAC;;IAE3B;IACA,IAAIC,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACZ,OAAO,GAAGQ,gBAAgB,EAAE,CAAC,CAAC;;IAE/D;IACA;IACA,IAAIK,aAAa,GAAG,EAAEN,KAAK,GAAG,GAAG,CAAC,GAAIG,iBAAiB,GAAGD,aAAa,GAAGF,KAAM;IAEhF,OAAOM,aAAa;EACtB,CAAC;EAEA,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,EAChClB,QAAQ,CAACmB,GAAG,CAAC,CAACC,GAAG,EAAEV,KAAK,kBACvBX,OAAA,CAACP,IAAI;MAAa6B,EAAE,EAAG,cAAaX,KAAM,EAAE;MAAAQ,QAAA,eAC1CnB,OAAA;QACEqB,GAAG,EAAEA,GAAI;QACTE,GAAG,EAAG,YAAWZ,KAAK,GAAG,CAAE,EAAE;QAC7Ba,KAAK,EAAE;UAAEC,SAAS,EAAG,cAAaf,iBAAiB,CAACC,KAAK,CAAE;QAAK,CAAE;QAClEO,SAAS,EAAC;MAAoB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAAC,GANOlB,KAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOV,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAhDID,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAkDf,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}