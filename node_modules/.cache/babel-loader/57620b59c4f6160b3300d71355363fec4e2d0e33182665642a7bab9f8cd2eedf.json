{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(logoImage);\n    const material = new THREE.MeshBasicMaterial({\n      map: texture\n    });\n    const materials = [material, material, material, material, new THREE.MeshBasicMaterial({\n      color: 0xffffff\n    }),\n    // Faccia superiore senza texture\n    material];\n    const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    const cube = new THREE.Mesh(cubeGeometry, materials);\n    cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n    scene.add(cube);\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    const umanoideTexture = textureLoader.load(umanoideImage);\n    const umanoideMaterial = new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    });\n    const umanoideGeometry = new THREE.BoxGeometry(0.5, 1.5, 2);\n    const umanoide = new THREE.Mesh(umanoideGeometry, umanoideMaterial);\n    umanoide.position.set(-3, -1, 0);\n    scene.add(umanoide);\n    umanoideRef.current = umanoide;\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 10);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.007\n    });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Anima l'umanoide\n      if (umanoideRef.current) {\n        umanoideRef.current.rotation.y += 0.001;\n      }\n\n      // Anima il cubo\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.01;\n        cubeRef.current.rotation.y += 0.01;\n      }\n\n      // Anima le particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = event => {\n      const mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://gemini-demo-52mps1ocj-alessandros-projects-ece31532.vercel.app';\n          break;\n        }\n      }\n    };\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"5MZ1eXhxWwDsFgvcf9gcLwOHxGs=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","NeuralScene","isScrolled","_s","mountRef","umanoideRef","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableZoom","textureLoader","TextureLoader","texture","load","material","MeshBasicMaterial","map","materials","color","cubeGeometry","BoxGeometry","cube","Mesh","set","add","umanoideTexture","umanoideMaterial","transparent","umanoideGeometry","umanoide","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","particlesMesh","Points","light","AmbientLight","directionalLight","DirectionalLight","animate","requestAnimationFrame","rotation","y","cubeRef","x","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","onClick","event","mouse","Vector2","clientX","clientY","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","children","length","object","location","href","removeEventListener","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(logoImage);\n    const material = new THREE.MeshBasicMaterial({ map: texture });\n    const materials = [\n      material,\n      material,\n      material,\n      material,\n      new THREE.MeshBasicMaterial({ color: 0xffffff }), // Faccia superiore senza texture\n      material,\n    ];\n\n    const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    const cube = new THREE.Mesh(cubeGeometry, materials);\n    cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n    scene.add(cube);\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    const umanoideTexture = textureLoader.load(umanoideImage);\n    const umanoideMaterial = new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true });\n    const umanoideGeometry = new THREE.BoxGeometry(0.5, 1.5, 2);\n    const umanoide = new THREE.Mesh(umanoideGeometry, umanoideMaterial);\n    umanoide.position.set(-3, -1, 0);\n    scene.add(umanoide);\n    umanoideRef.current = umanoide;\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 10);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({ size: 0.007 });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Anima l'umanoide\n      if (umanoideRef.current) {\n        umanoideRef.current.rotation.y += 0.001;\n      }\n\n      // Anima il cubo\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.01;\n        cubeRef.current.rotation.y += 0.01;\n      }\n\n      // Anima le particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = (event) => {\n      const mouse = new THREE.Vector2(\n        (event.clientX / window.innerWidth) * 2 - 1,\n        -(event.clientY / window.innerHeight) * 2 + 1\n      );\n\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://gemini-demo-52mps1ocj-alessandros-projects-ece31532.vercel.app';\n          break;\n        }\n      }\n    };\n\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]);\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}