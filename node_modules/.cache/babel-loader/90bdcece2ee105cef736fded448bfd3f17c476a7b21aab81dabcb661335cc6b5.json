{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/Carosello.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react'; // Aggiungi useRef qui\nimport { Link } from 'react-router-dom';\n\n// Importa le immagini\nimport immagine1 from './immagini2/immagine1.jpg';\nimport immagine2 from './immagini2/immagine2.jpg';\nimport immagine3 from './immagini2/immagine3.jpg';\nimport immagine4 from './immagini2/immagine4.jpg';\nimport immagine5 from './immagini2/immagine5.jpg';\n\n// Definisci la variabile immagini come un array dei percorsi delle immagini importate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst immagini = [immagine1, immagine2, immagine3, immagine4, immagine5];\nconst Carosello = () => {\n  _s();\n  const caroselloRef = useRef(null);\n  const [scrollY, setScrollY] = useState(0);\n  const [caroselloPosition, setCaroselloPosition] = useState(0);\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      setScrollY(currentScrollY);\n      const caroselloRect = caroselloRef.current.getBoundingClientRect();\n      const caroselloTop = caroselloRect.top + currentScrollY;\n      if (currentScrollY >= caroselloTop && currentScrollY <= caroselloTop + caroselloRect.height) {\n        // L'utente sta scrollando all'interno del carosello\n        const scrollDelta = currentScrollY - caroselloTop;\n        setCaroselloPosition(scrollDelta);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  const calculatePosition = index => {\n    // Calcola la posizione delle immagini basata su caroselloPosition\n    // Questo esempio sposta ogni immagine di 100px per ogni pixel di scrollDelta\n    return -caroselloPosition + index * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: caroselloRef,\n    className: \"carousel-container\",\n    children: immagini.map((src, index) => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/dettaglio/${index}`,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: src,\n        alt: `Immagine ${index + 1}`,\n        style: {\n          transform: `translateX(${calculatePosition(index)}px)`\n        },\n        className: \"carosello-immagine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Carosello, \"kbbSPAL2S7UaSqufjuWWnVjoG2M=\");\n_c = Carosello;\nexport default Carosello;\nvar _c;\n$RefreshReg$(_c, \"Carosello\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","immagine1","immagine2","immagine3","immagine4","immagine5","jsxDEV","_jsxDEV","immagini","Carosello","_s","caroselloRef","scrollY","setScrollY","caroselloPosition","setCaroselloPosition","handleScroll","currentScrollY","window","caroselloRect","current","getBoundingClientRect","caroselloTop","top","height","scrollDelta","addEventListener","removeEventListener","calculatePosition","index","ref","className","children","map","src","to","alt","style","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/Carosello.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'; // Aggiungi useRef qui\nimport { Link } from 'react-router-dom';\n\n// Importa le immagini\nimport immagine1 from './immagini2/immagine1.jpg';\nimport immagine2 from './immagini2/immagine2.jpg';\nimport immagine3 from './immagini2/immagine3.jpg';\nimport immagine4 from './immagini2/immagine4.jpg';\nimport immagine5 from './immagini2/immagine5.jpg';\n\n// Definisci la variabile immagini come un array dei percorsi delle immagini importate\nconst immagini = [immagine1, immagine2, immagine3, immagine4, immagine5];\n\nconst Carosello = () => {\n  const caroselloRef = useRef(null);\n  const [scrollY, setScrollY] = useState(0);\n  const [caroselloPosition, setCaroselloPosition] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      setScrollY(currentScrollY);\n\n      const caroselloRect = caroselloRef.current.getBoundingClientRect();\n      const caroselloTop = caroselloRect.top + currentScrollY;\n\n      if (currentScrollY >= caroselloTop && currentScrollY <= caroselloTop + caroselloRect.height) {\n        // L'utente sta scrollando all'interno del carosello\n        const scrollDelta = currentScrollY - caroselloTop;\n        setCaroselloPosition(scrollDelta);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const calculatePosition = (index) => {\n    // Calcola la posizione delle immagini basata su caroselloPosition\n    // Questo esempio sposta ogni immagine di 100px per ogni pixel di scrollDelta\n    return -caroselloPosition + (index * 100);\n  };\n\n  return (\n    <div ref={caroselloRef} className=\"carousel-container\">\n      {immagini.map((src, index) => (\n        <Link key={index} to={`/dettaglio/${index}`}>\n          <img\n            src={src}\n            alt={`Immagine ${index + 1}`}\n            style={{ transform: `translateX(${calculatePosition(index)}px)` }}\n            className=\"carosello-immagine\"\n          />\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default Carosello;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO,CAAC,CAAC;AAC5D,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AACA,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,CAACP,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,CAAC;AAExE,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACiB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACd,MAAMkB,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,cAAc,GAAGC,MAAM,CAACN,OAAO;MACrCC,UAAU,CAACI,cAAc,CAAC;MAE1B,MAAME,aAAa,GAAGR,YAAY,CAACS,OAAO,CAACC,qBAAqB,CAAC,CAAC;MAClE,MAAMC,YAAY,GAAGH,aAAa,CAACI,GAAG,GAAGN,cAAc;MAEvD,IAAIA,cAAc,IAAIK,YAAY,IAAIL,cAAc,IAAIK,YAAY,GAAGH,aAAa,CAACK,MAAM,EAAE;QAC3F;QACA,MAAMC,WAAW,GAAGR,cAAc,GAAGK,YAAY;QACjDP,oBAAoB,CAACU,WAAW,CAAC;MACnC;IACF,CAAC;IAEDP,MAAM,CAACQ,gBAAgB,CAAC,QAAQ,EAAEV,YAAY,CAAC;IAE/C,OAAO,MAAM;MACXE,MAAM,CAACS,mBAAmB,CAAC,QAAQ,EAAEX,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,iBAAiB,GAAIC,KAAK,IAAK;IACnC;IACA;IACA,OAAO,CAACf,iBAAiB,GAAIe,KAAK,GAAG,GAAI;EAC3C,CAAC;EAED,oBACEtB,OAAA;IAAKuB,GAAG,EAAEnB,YAAa;IAACoB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,EACnDxB,QAAQ,CAACyB,GAAG,CAAC,CAACC,GAAG,EAAEL,KAAK,kBACvBtB,OAAA,CAACP,IAAI;MAAamC,EAAE,EAAG,cAAaN,KAAM,EAAE;MAAAG,QAAA,eAC1CzB,OAAA;QACE2B,GAAG,EAAEA,GAAI;QACTE,GAAG,EAAG,YAAWP,KAAK,GAAG,CAAE,EAAE;QAC7BQ,KAAK,EAAE;UAAEC,SAAS,EAAG,cAAaV,iBAAiB,CAACC,KAAK,CAAE;QAAK,CAAE;QAClEE,SAAS,EAAC;MAAoB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAAC,GANOb,KAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOV,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChC,EAAA,CA/CID,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAiDf,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}