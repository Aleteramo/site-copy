{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const umanoideRef = useRef(); // Aggiungi questa linea\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    if (currentRef) {\n      currentRef.appendChild(renderer.domElement);\n    }\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const materials = Array(6).fill(material);\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, materials);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    textureLoader.load(umanoideImage, function (texture) {\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n      });\n      const umanoide = new THREE.Mesh(geometry, material);\n      umanoide.position.set(-1, 0, 0);\n      scene.add(umanoide);\n      umanoideRef.current = umanoide; // Aggiorna il riferimento qui\n    });\n\n    // ... il resto del codice rimane invariato ...\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = event => {\n      // ... codice precedente ...\n      const intersects = raycaster.intersectObjects(scene.children, true);\n      if (intersects.length > 0) {\n        const object = intersects[0].object;\n        if (object === umanoideRef.current) {\n          // Usa il riferimento qui\n          console.log('Umanoide cliccato');\n          // Aggiungi qui la logica che vuoi eseguire quando l'umanoide viene cliccato\n        }\n      }\n    };\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      if (currentRef && renderer.domElement) {\n        currentRef.removeChild(renderer.domElement);\n      }\n    };\n  }, [isScrolled]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"5MZ1eXhxWwDsFgvcf9gcLwOHxGs=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","NeuralScene","isScrolled","_s","mountRef","umanoideRef","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableZoom","textureLoader","TextureLoader","load","texture","material","MeshBasicMaterial","map","materials","Array","fill","cubeGeometry","BoxGeometry","cube","Mesh","set","add","geometry","transparent","umanoide","onClick","event","intersects","raycaster","intersectObjects","children","length","object","console","log","addEventListener","removeEventListener","onWindowResize","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n  const umanoideRef = useRef(); // Aggiungi questa linea\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    if (currentRef) {\n      currentRef.appendChild(renderer.domElement);\n    }\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const materials = Array(6).fill(material);\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, materials);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    textureLoader.load(umanoideImage, function (texture) {\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({ map: texture, transparent: true });\n      const umanoide = new THREE.Mesh(geometry, material);\n      umanoide.position.set(-1, 0, 0);\n      scene.add(umanoide);\n      umanoideRef.current = umanoide; // Aggiorna il riferimento qui\n    });\n\n    // ... il resto del codice rimane invariato ...\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = (event) => {\n      // ... codice precedente ...\n      const intersects = raycaster.intersectObjects(scene.children, true);\n\n      if (intersects.length > 0) {\n        const object = intersects[0].object;\n        if (object === umanoideRef.current) { // Usa il riferimento qui\n          console.log('Umanoide cliccato');\n          // Aggiungi qui la logica che vuoi eseguire quando l'umanoide viene cliccato\n        }\n      }\n    };\n\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      if (currentRef && renderer.domElement) {\n        currentRef.removeChild(renderer.domElement);\n      }\n    };\n  }, [isScrolled]);\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}