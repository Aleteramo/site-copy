{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const cubeRef = useRef();\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(0, 0, 0);\n      scene.add(cube);\n      cubeRef.current = cube;\n    });\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    textureLoader.load(umanoideImage, function (texture) {\n      const geometry = new THREE.BoxGeometry(2, 2, 2); // Ingrandito del doppio\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n      });\n      const umanoide = new THREE.Mesh(geometry, material);\n      umanoide.position.set(-3, 0, 0); // Spostato tre volte a destra\n      scene.add(umanoide);\n      umanoideRef.current = umanoide;\n    });\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 5);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.007\n    });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = event => {\n      const mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://gemini-demo-52mps1ocj-alessandros-projects-ece31532.vercel.app';\n          break;\n        }\n      }\n    };\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]); // Aggiungi umanoideRef.current alle dipendenze se necessario\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"8IN3WHgI3y/QtBF2ouA9R4C67GM=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","NeuralScene","isScrolled","_s","mountRef","umanoideRef","cubeRef","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableZoom","textureLoader","TextureLoader","load","texture","material","MeshBasicMaterial","map","cubeGeometry","BoxGeometry","cube","Mesh","set","add","geometry","transparent","umanoide","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","particlesMesh","Points","light","AmbientLight","directionalLight","DirectionalLight","animate","requestAnimationFrame","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","onClick","event","mouse","Vector2","clientX","clientY","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","children","length","object","location","href","removeEventListener","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const cubeRef = useRef();\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(0, 0, 0);\n      scene.add(cube);\n      cubeRef.current = cube;\n    });\n// Carica l'immagine dell'umanoide come texture su un cubo trasparente\ntextureLoader.load(umanoideImage, function (texture) {\n  const geometry = new THREE.BoxGeometry(2, 2, 2); // Ingrandito del doppio\n  const material = new THREE.MeshBasicMaterial({ map: texture, transparent: true });\n  const umanoide = new THREE.Mesh(geometry, material);\n  umanoide.position.set(-3, 0, 0); // Spostato tre volte a destra\n  scene.add(umanoide);\n  umanoideRef.current = umanoide;\n});\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 5);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({ size: 0.007 });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = (event) => {\n      const mouse = new THREE.Vector2(\n        (event.clientX / window.innerWidth) * 2 - 1,\n        -(event.clientY / window.innerHeight) * 2 + 1\n      );\n\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://gemini-demo-52mps1ocj-alessandros-projects-ece31532.vercel.app';\n          break;\n        }\n      }\n    };\n\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]); // Aggiungi umanoideRef.current alle dipendenze se necessario\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}