{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    if (currentRef) {\n      currentRef.appendChild(renderer.domElement);\n    }\n    let cube;\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const materials = Array(6).fill(material);\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      cube = new THREE.Mesh(cubeGeometry, materials);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n\n    // Carica l'immagine dell'umanoide come texture su una forma 3D\n    textureLoader.load(umanoideImage, function (texture) {\n      const geometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const umanoide = new THREE.Mesh(geometry, material);\n      umanoide.position.set(-1, 0, 0);\n      scene.add(umanoide);\n    });\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 5);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.007\n    });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n      if (cube) {\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      if (currentRef && renderer.domElement) {\n        currentRef.removeChild(renderer.domElement);\n      }\n    };\n  }, [isScrolled]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","NeuralScene","isScrolled","_s","mountRef","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","cube","controls","enableZoom","textureLoader","TextureLoader","load","texture","minFilter","LinearFilter","magFilter","material","MeshBasicMaterial","map","materials","Array","fill","cubeGeometry","BoxGeometry","Mesh","set","add","geometry","SphereGeometry","umanoide","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","particlesMesh","Points","light","AmbientLight","directionalLight","DirectionalLight","animate","requestAnimationFrame","rotation","y","x","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    if (currentRef) {\n      currentRef.appendChild(renderer.domElement);\n    }\n\n    let cube;\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const materials = Array(6).fill(material);\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      cube = new THREE.Mesh(cubeGeometry, materials);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n    });\n\n    // Carica l'immagine dell'umanoide come texture su una forma 3D\n    textureLoader.load(umanoideImage, function (texture) {\n      const geometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const umanoide = new THREE.Mesh(geometry, material);\n      umanoide.position.set(-1, 0, 0);\n      scene.add(umanoide);\n    });\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 5);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({ size: 0.007 });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n\n      if (cube) {\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      if (currentRef && renderer.domElement) {\n        currentRef.removeChild(renderer.domElement);\n      }\n    };\n  }, [isScrolled]);\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AACzE,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,aAAa,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAGD,QAAQ,CAACE,OAAO;IACnC,MAAMC,KAAK,GAAG,IAAIZ,KAAK,CAACa,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAId,KAAK,CAACe,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjGJ,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,CAAC;IAErB,MAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAC7DF,QAAQ,CAACG,OAAO,CAACR,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvD,IAAIR,UAAU,EAAE;MACdA,UAAU,CAACe,WAAW,CAACJ,QAAQ,CAACK,UAAU,CAAC;IAC7C;IAEA,IAAIC,IAAI;IACR,MAAMC,QAAQ,GAAG,IAAI3B,aAAa,CAACa,MAAM,EAAEO,QAAQ,CAACK,UAAU,CAAC;IAC/DE,QAAQ,CAACC,UAAU,GAAG,KAAK;IAE3B,MAAMC,aAAa,GAAG,IAAI9B,KAAK,CAAC+B,aAAa,CAAC,CAAC;IAC/CD,aAAa,CAACE,IAAI,CAAC9B,SAAS,EAAE,UAAU+B,OAAO,EAAE;MAC/CA,OAAO,CAACC,SAAS,GAAGlC,KAAK,CAACmC,YAAY;MACtCF,OAAO,CAACG,SAAS,GAAGpC,KAAK,CAACmC,YAAY;MAEtC,MAAME,QAAQ,GAAG,IAAIrC,KAAK,CAACsC,iBAAiB,CAAC;QAAEC,GAAG,EAAEN;MAAQ,CAAC,CAAC;MAC9D,MAAMO,SAAS,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACL,QAAQ,CAAC;MACzC,MAAMM,YAAY,GAAG,IAAI3C,KAAK,CAAC4C,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MACzDjB,IAAI,GAAG,IAAI3B,KAAK,CAAC6C,IAAI,CAACF,YAAY,EAAEH,SAAS,CAAC;MAC9Cb,IAAI,CAACR,QAAQ,CAAC2B,GAAG,CAACvC,UAAU,GAAG,CAAC,GAAG,CAAC,EAAEA,UAAU,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MAC5DK,KAAK,CAACmC,GAAG,CAACpB,IAAI,CAAC;IACjB,CAAC,CAAC;;IAEF;IACAG,aAAa,CAACE,IAAI,CAAC7B,aAAa,EAAE,UAAU8B,OAAO,EAAE;MACnD,MAAMe,QAAQ,GAAG,IAAIhD,KAAK,CAACiD,cAAc,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;MACtD,MAAMZ,QAAQ,GAAG,IAAIrC,KAAK,CAACsC,iBAAiB,CAAC;QAAEC,GAAG,EAAEN;MAAQ,CAAC,CAAC;MAC9D,MAAMiB,QAAQ,GAAG,IAAIlD,KAAK,CAAC6C,IAAI,CAACG,QAAQ,EAAEX,QAAQ,CAAC;MACnDa,QAAQ,CAAC/B,QAAQ,CAAC2B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC/BlC,KAAK,CAACmC,GAAG,CAACG,QAAQ,CAAC;IACrB,CAAC,CAAC;;IAEF;IACA,MAAMC,iBAAiB,GAAG,IAAInD,KAAK,CAACoD,cAAc,CAAC,CAAC;IACpD,MAAMC,cAAc,GAAG,KAAK;IAC5B,MAAMC,QAAQ,GAAG,IAAIC,YAAY,CAACF,cAAc,GAAG,CAAC,CAAC;IACrD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,cAAc,GAAG,CAAC,EAAEG,CAAC,EAAE,EAAE;MAC3CF,QAAQ,CAACE,CAAC,CAAC,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3D;IACAP,iBAAiB,CAACQ,YAAY,CAAC,UAAU,EAAE,IAAI3D,KAAK,CAAC4D,eAAe,CAACN,QAAQ,EAAE,CAAC,CAAC,CAAC;IAElF,MAAMO,iBAAiB,GAAG,IAAI7D,KAAK,CAAC8D,cAAc,CAAC;MAAEC,IAAI,EAAE;IAAM,CAAC,CAAC;IACnE,MAAMC,aAAa,GAAG,IAAIhE,KAAK,CAACiE,MAAM,CAACd,iBAAiB,EAAEU,iBAAiB,CAAC;IAC5EjD,KAAK,CAACmC,GAAG,CAACiB,aAAa,CAAC;;IAExB;IACA,MAAME,KAAK,GAAG,IAAIlE,KAAK,CAACmE,YAAY,CAAC,QAAQ,CAAC;IAC9CvD,KAAK,CAACmC,GAAG,CAACmB,KAAK,CAAC;IAEhB,MAAME,gBAAgB,GAAG,IAAIpE,KAAK,CAACqE,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChED,gBAAgB,CAACjD,QAAQ,CAAC2B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtClC,KAAK,CAACmC,GAAG,CAACqB,gBAAgB,CAAC;IAE3B,MAAME,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAE9B,IAAIN,aAAa,EAAE;QACjBA,aAAa,CAACQ,QAAQ,CAACC,CAAC,IAAI,KAAK;MACnC;MAEA,IAAI9C,IAAI,EAAE;QACRA,IAAI,CAAC6C,QAAQ,CAACE,CAAC,IAAI,IAAI;QACvB/C,IAAI,CAAC6C,QAAQ,CAACC,CAAC,IAAI,IAAI;MACzB;MAEA7C,QAAQ,CAAC+C,MAAM,CAAC,CAAC;MACjBtD,QAAQ,CAACuD,MAAM,CAAChE,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IACDwD,OAAO,CAAC,CAAC;IAET,MAAMO,cAAc,GAAGA,CAAA,KAAM;MAC3B/D,MAAM,CAACgE,MAAM,GAAG9D,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtDJ,MAAM,CAACiE,sBAAsB,CAAC,CAAC;MAC/B1D,QAAQ,CAACG,OAAO,CAACR,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACzD,CAAC;IACDF,MAAM,CAACgE,gBAAgB,CAAC,QAAQ,EAAEH,cAAc,EAAE,KAAK,CAAC;IAExD,OAAO,MAAM;MACX7D,MAAM,CAACiE,mBAAmB,CAAC,QAAQ,EAAEJ,cAAc,CAAC;MACpD,IAAInE,UAAU,IAAIW,QAAQ,CAACK,UAAU,EAAE;QACrChB,UAAU,CAACwE,WAAW,CAAC7D,QAAQ,CAACK,UAAU,CAAC;MAC7C;IACF,CAAC;EACH,CAAC,EAAE,CAACnB,UAAU,CAAC,CAAC;EAEhB,oBAAOF,OAAA;IAAK8E,GAAG,EAAE1E,QAAS;IAAC2E,SAAS,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3D,CAAC;AAAChF,EAAA,CA/FIF,WAAW;AAAAmF,EAAA,GAAXnF,WAAW;AAiGjB,eAAeA,WAAW;AAAC,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}