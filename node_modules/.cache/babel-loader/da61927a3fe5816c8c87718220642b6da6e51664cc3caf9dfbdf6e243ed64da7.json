{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ologrammaRef = useRef();\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const cubeRef = useRef();\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n      cubeRef.current = cube;\n    });\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    const umanoideTexture = textureLoader.load(umanoideImage);\n    const umanoideMaterials = [new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }),\n    // Faccia frontale\n    new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }),\n    // Faccia posteriore\n    new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0\n    }),\n    // Faccia superiore completamente trasparente\n    new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }),\n    // Faccia inferiore\n    new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }),\n    // Faccia destra\n    new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }) // Faccia sinistra\n    ];\n    const umanoideGeometry = new THREE.BoxGeometry(1.5, 1.5, 2);\n    const umanoide = new THREE.Mesh(umanoideGeometry, umanoideMaterials);\n    umanoide.position.set(-3, -1, 0);\n    scene.add(umanoide);\n    umanoideRef.current = umanoide;\n    textureLoader.load(umanoideImage, function (texture) {\n      const ologrammaMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true,\n        opacity: 0.5,\n        color: 0x00ff00\n      });\n      const ologrammaGeometry = new THREE.PlaneGeometry(1.5, 1.5);\n      const ologramma = new THREE.Mesh(ologrammaGeometry, ologrammaMaterial);\n      ologramma.position.set(3, 0, 0); // Scegli una nuova posizione per l'ologramma\n      scene.add(ologramma);\n      ologrammaRef.current = ologramma;\n    });\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 10);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.007\n    });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (ologrammaRef.current) {\n        ologrammaRef.current.material.opacity = 0.5 + Math.sin(Date.now() * 0.002) * 0.25; // Effetto pulsante\n        ologrammaRef.current.rotation.y += 0.01; // Rotazione continua\n      }\n\n      // Anima l'umanoide\n      if (umanoideRef.current) {\n        umanoideRef.current.rotation.y += 0.01;\n      }\n\n      // Anima il cubo\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.01;\n        cubeRef.current.rotation.y += 0.01;\n      }\n\n      // Anima le particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = event => {\n      const mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://ia-liart-one.vercel.app/';\n          break;\n        }\n      }\n    };\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"8IN3WHgI3y/QtBF2ouA9R4C67GM=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","ologrammaRef","NeuralScene","isScrolled","_s","mountRef","umanoideRef","cubeRef","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableZoom","textureLoader","TextureLoader","load","texture","material","MeshBasicMaterial","map","cubeGeometry","BoxGeometry","cube","Mesh","set","add","umanoideTexture","umanoideMaterials","transparent","opacity","umanoideGeometry","umanoide","ologrammaMaterial","color","ologrammaGeometry","PlaneGeometry","ologramma","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","particlesMesh","Points","light","AmbientLight","directionalLight","DirectionalLight","animate","requestAnimationFrame","sin","Date","now","rotation","y","x","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","onClick","event","mouse","Vector2","clientX","clientY","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","children","length","object","location","href","removeEventListener","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\nconst ologrammaRef = useRef();\n\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const cubeRef = useRef();\n  \n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n      cubeRef.current = cube;\n    });\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    const umanoideTexture = textureLoader.load(umanoideImage);\n    const umanoideMaterials = [\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia frontale\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia posteriore\n      new THREE.MeshBasicMaterial({ transparent: true, opacity: 0 }), // Faccia superiore completamente trasparente\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia inferiore\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia destra\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia sinistra\n    ];\n    const umanoideGeometry = new THREE.BoxGeometry(1.5, 1.5, 2);\n    const umanoide = new THREE.Mesh(umanoideGeometry, umanoideMaterials);\n    umanoide.position.set(-3, -1, 0);\n    scene.add(umanoide);\n    umanoideRef.current = umanoide;\n\n    textureLoader.load(umanoideImage, function (texture) {\n      const ologrammaMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true,\n        opacity: 0.5,\n        color: 0x00ff00\n      });\n      const ologrammaGeometry = new THREE.PlaneGeometry(1.5, 1.5);\n      const ologramma = new THREE.Mesh(ologrammaGeometry, ologrammaMaterial);\n      ologramma.position.set(3, 0, 0); // Scegli una nuova posizione per l'ologramma\n      scene.add(ologramma);\n      ologrammaRef.current = ologramma;\n    });\n\n    \n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 10);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({ size: 0.007 });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      if (ologrammaRef.current) {\n        ologrammaRef.current.material.opacity = 0.5 + Math.sin(Date.now() * 0.002) * 0.25; // Effetto pulsante\n        ologrammaRef.current.rotation.y += 0.01; // Rotazione continua\n      }\n      \n\n      // Anima l'umanoide\n      if (umanoideRef.current) {\n        umanoideRef.current.rotation.y += 0.01;\n      }\n\n      // Anima il cubo\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.01;\n        cubeRef.current.rotation.y += 0.01;\n      }\n\n      // Anima le particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = (event) => {\n      const mouse = new THREE.Vector2(\n        (event.clientX / window.innerWidth) * 2 - 1,\n        -(event.clientY / window.innerHeight) * 2 + 1\n      );\n\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://ia-liart-one.vercel.app/';\n          break;\n        }\n      }\n    };\n\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]);\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}