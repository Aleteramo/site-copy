{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/Carosello.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport immagine1 from './immagini2/immagine1.jpg';\nimport immagine2 from './immagini2/immagine2.jpg';\nimport immagine3 from './immagini2/immagine3.jpg';\nimport immagine4 from './immagini2/immagine4.jpg';\nimport immagine5 from './immagini2/immagine5.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst immagini = [immagine1, immagine2, immagine3, immagine4, immagine5];\nconst Carosello = () => {\n  _s();\n  const caroselloRef = useRef(null);\n  const [caroselloScrollPosition, setCaroselloScrollPosition] = useState(0);\n  const [isCaroselloFullyInView, setIsCaroselloFullyInView] = useState(false);\n  const updateCaroselloImagesPosition = useCallback(() => {\n    // Assumi che ogni immagine debba muoversi di una quantità proporzionale allo scroll verticale\n    // oltre il punto in cui il carosello diventa completamente visibile.\n    // 'movementSpeed' determina quanto velocemente le immagini si muovono orizzontalmente\n    // rispetto allo scroll verticale.\n    const movementSpeed = 0.5;\n\n    // Calcola la traslazione orizzontale totale basata sulla posizione di scroll del carosello.\n    // Potresti voler limitare questa traslazione per evitare che le immagini si spostino troppo.\n    const totalTranslation = caroselloScrollPosition * movementSpeed;\n\n    // Applica la traslazione a ciascuna immagine.\n    // Questo esempio sposta tutte le immagini dello stesso importo, ma potresti\n    // voler variare la traslazione per ciascuna immagine basandoti su altri fattori.\n    immagini.forEach((_, index) => {\n      const imageElement = caroselloRef.current.children[index];\n      imageElement.style.transform = `translateX(-${totalTranslation}px)`;\n    });\n  }, [caroselloScrollPosition]);\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      const caroselloRect = caroselloRef.current.getBoundingClientRect();\n      const isFullyInView = caroselloRect.top >= 0 && caroselloRect.bottom <= window.innerHeight;\n      setIsCaroselloFullyInView(isFullyInView);\n      if (isFullyInView) {\n        // Calcola la posizione di scroll relativa al carosello\n        const scrollDelta = currentScrollY - caroselloRect.top;\n        setCaroselloScrollPosition(scrollDelta);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  useEffect(() => {\n    if (isCaroselloFullyInView) {\n      updateCaroselloImagesPosition();\n    }\n  }, [isCaroselloFullyInView, updateCaroselloImagesPosition]); // Includi la funzione nell'array di dipendenze\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: caroselloRef,\n    className: \"carousel-container\",\n    children: immagini.map((src, index) => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/dettaglio/${index}`,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: src,\n        alt: `Immagine ${index + 1}`,\n        className: \"carosello-immagine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Carosello, \"ALgyIvvJRZW9k8kVpxsZAgmZHrg=\");\n_c = Carosello;\nexport default Carosello;\nvar _c;\n$RefreshReg$(_c, \"Carosello\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Link","immagine1","immagine2","immagine3","immagine4","immagine5","jsxDEV","_jsxDEV","immagini","Carosello","_s","caroselloRef","caroselloScrollPosition","setCaroselloScrollPosition","isCaroselloFullyInView","setIsCaroselloFullyInView","updateCaroselloImagesPosition","movementSpeed","totalTranslation","forEach","_","index","imageElement","current","children","style","transform","handleScroll","currentScrollY","window","scrollY","caroselloRect","getBoundingClientRect","isFullyInView","top","bottom","innerHeight","scrollDelta","addEventListener","removeEventListener","ref","className","map","src","to","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/Carosello.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport immagine1 from './immagini2/immagine1.jpg';\nimport immagine2 from './immagini2/immagine2.jpg';\nimport immagine3 from './immagini2/immagine3.jpg';\nimport immagine4 from './immagini2/immagine4.jpg';\nimport immagine5 from './immagini2/immagine5.jpg';\n\nconst immagini = [immagine1, immagine2, immagine3, immagine4, immagine5];\n\nconst Carosello = () => {\n  const caroselloRef = useRef(null);\n  const [caroselloScrollPosition, setCaroselloScrollPosition] = useState(0);\n  const [isCaroselloFullyInView, setIsCaroselloFullyInView] = useState(false);\n\n  const updateCaroselloImagesPosition = useCallback(() => {\n    // Assumi che ogni immagine debba muoversi di una quantità proporzionale allo scroll verticale\n    // oltre il punto in cui il carosello diventa completamente visibile.\n    // 'movementSpeed' determina quanto velocemente le immagini si muovono orizzontalmente\n    // rispetto allo scroll verticale.\n    const movementSpeed = 0.5;\n  \n    // Calcola la traslazione orizzontale totale basata sulla posizione di scroll del carosello.\n    // Potresti voler limitare questa traslazione per evitare che le immagini si spostino troppo.\n    const totalTranslation = caroselloScrollPosition * movementSpeed;\n  \n    // Applica la traslazione a ciascuna immagine.\n    // Questo esempio sposta tutte le immagini dello stesso importo, ma potresti\n    // voler variare la traslazione per ciascuna immagine basandoti su altri fattori.\n    immagini.forEach((_, index) => {\n      const imageElement = caroselloRef.current.children[index];\n      imageElement.style.transform = `translateX(-${totalTranslation}px)`;\n    });\n  }, [caroselloScrollPosition]);\n  \n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      const caroselloRect = caroselloRef.current.getBoundingClientRect();\n      const isFullyInView = caroselloRect.top >= 0 && caroselloRect.bottom <= window.innerHeight;\n\n      setIsCaroselloFullyInView(isFullyInView);\n\n      if (isFullyInView) {\n        // Calcola la posizione di scroll relativa al carosello\n        const scrollDelta = currentScrollY - caroselloRect.top;\n        setCaroselloScrollPosition(scrollDelta);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    if (isCaroselloFullyInView) {\n      updateCaroselloImagesPosition();\n    }\n  }, [isCaroselloFullyInView, updateCaroselloImagesPosition]); // Includi la funzione nell'array di dipendenze\n\n  return (\n    <div ref={caroselloRef} className=\"carousel-container\">\n      {immagini.map((src, index) => (\n        <Link key={index} to={`/dettaglio/${index}`}>\n          <img src={src} alt={`Immagine ${index + 1}`} className=\"carosello-immagine\" />\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default Carosello;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}