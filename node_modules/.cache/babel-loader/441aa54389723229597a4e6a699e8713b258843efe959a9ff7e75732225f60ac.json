{"ast":null,"code":"var _jsxFileName = \"/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralScene = ({\n  isScrolled\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const cubeRef = useRef();\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n      cubeRef.current = cube;\n    });\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    const umanoideTexture = textureLoader.load(umanoideImage);\n    const umanoideMaterials = [new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0\n    }),\n    // Faccia superiore completamente trasparente\n    new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0\n    }),\n    // Faccia superiore completamente trasparente\n    new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0\n    }),\n    // Faccia superiore completamente trasparente\n    new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0\n    }),\n    // Faccia superiore completamente trasparente\n    new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }),\n    // Faccia destra\n    new THREE.MeshBasicMaterial({\n      map: umanoideTexture,\n      transparent: true\n    }) // Faccia sinistra\n    ];\n    const umanoideGeometry = new THREE.BoxGeometry(0.9, 0.9, 1);\n    const umanoide = new THREE.Mesh(umanoideGeometry, umanoideMaterials);\n    umanoide.position.set(-3.5, -1.8, 0);\n    scene.add(umanoide);\n    umanoideRef.current = umanoide;\n\n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 10);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.007\n    });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n    // manichino\n    const loader = new GLTFLoader();\n    loader.load('/3dumanoide.glb', function (gltf) {\n      gltf.scene.scale.set(0.5, 0.5, 0.5); // Aumenta la scala se necessario\n      gltf.scene.position.set(0, 0, 0);\n      gltf.scene.rotation.y = Math.PI; // Ruota di 180 gradi se necessario\n      scene.add(gltf.scene);\n    }, undefined, function (error) {\n      console.error('An error happened while loading the model:', error);\n    });\n    let angoloMovimento = 0;\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Calcola la nuova posizione del manichino basata sul movimento delle particelle\n      // Ad esempio, se le particelle si muovono in un cerchio, potresti fare:\n      const time = Date.now() * 0.001; // Tempo corrente in secondi\n      const radius = 5; // Raggio del movimento circolare\n      const speed = 1; // Velocità di movimento\n      const angle = time * speed; // Angolo di movimento basato sul tempo e sulla velocità\n\n      // Calcola la posizione x e z basata sull'angolo\n      const x = radius * Math.sin(angle);\n      const z = radius * Math.cos(angle);\n\n      // Aggiorna la posizione del manichino\n      if (umanoideRef.current) {\n        umanoideRef.current.position.x = x;\n        umanoideRef.current.position.z = z;\n      }\n\n      // Anima l'umanoide\n      if (umanoideRef.current) {\n        umanoideRef.current.rotation.y += 0.001;\n      }\n\n      // Anima il cubo\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.001;\n        cubeRef.current.rotation.y += 0.001;\n      }\n\n      // Anima le particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = event => {\n      const mouse = new THREE.Vector2(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://ia-liart-one.vercel.app/';\n          break;\n        }\n      }\n    };\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]); // Non è necessario aggiungere ologrammaRef.current qui\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"scene-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralScene, \"8IN3WHgI3y/QtBF2ouA9R4C67GM=\");\n_c = NeuralScene;\nexport default NeuralScene;\nvar _c;\n$RefreshReg$(_c, \"NeuralScene\");","map":{"version":3,"names":["React","useRef","useEffect","GLTFLoader","THREE","OrbitControls","logoImage","umanoideImage","jsxDEV","_jsxDEV","NeuralScene","isScrolled","_s","mountRef","umanoideRef","cubeRef","currentRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableZoom","textureLoader","TextureLoader","load","texture","material","MeshBasicMaterial","map","cubeGeometry","BoxGeometry","cube","Mesh","set","add","umanoideTexture","umanoideMaterials","transparent","opacity","umanoideGeometry","umanoide","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","particlesMesh","Points","light","AmbientLight","directionalLight","DirectionalLight","loader","gltf","scale","rotation","y","PI","undefined","error","console","angoloMovimento","animate","requestAnimationFrame","time","Date","now","radius","speed","angle","x","sin","cos","update","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","onClick","event","mouse","Vector2","clientX","clientY","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","children","length","object","location","href","removeEventListener","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessiocavatassi/Desktop/site/src/NeuralScene.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport logoImage from './immagini2/logounite.jpeg';\nimport umanoideImage from './immagini2/umanoide.png';\n\n\n\nconst NeuralScene = ({ isScrolled }) => {\n  const mountRef = useRef(null);\n  const umanoideRef = useRef();\n  const cubeRef = useRef();\n\n  \n\n  useEffect(() => {\n    const currentRef = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentRef.appendChild(renderer.domElement);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(logoImage, function (texture) {\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const cubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n      const cube = new THREE.Mesh(cubeGeometry, material);\n      cube.position.set(isScrolled ? 2 : 0, isScrolled ? 2 : 1, 1);\n      scene.add(cube);\n      cubeRef.current = cube;\n    });\n\n    // Carica l'immagine dell'umanoide come texture su un cubo trasparente\n    const umanoideTexture = textureLoader.load(umanoideImage);\n    const umanoideMaterials = [\n      new THREE.MeshBasicMaterial({ transparent: true, opacity: 0 }), // Faccia superiore completamente trasparente\n      new THREE.MeshBasicMaterial({ transparent: true, opacity: 0 }), // Faccia superiore completamente trasparente\n      new THREE.MeshBasicMaterial({ transparent: true, opacity: 0 }), // Faccia superiore completamente trasparente\n      new THREE.MeshBasicMaterial({ transparent: true, opacity: 0 }), // Faccia superiore completamente trasparente\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia destra\n      new THREE.MeshBasicMaterial({ map: umanoideTexture, transparent: true }), // Faccia sinistra\n    ];\n    const umanoideGeometry = new THREE.BoxGeometry(0.9, 0.9, 1);\n    const umanoide = new THREE.Mesh(umanoideGeometry, umanoideMaterials);\n    umanoide.position.set(-3.5, -1.8, 0);\n    scene.add(umanoide);\n    umanoideRef.current = umanoide;\n\n  \n\n    \n    // Particelle\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 10000;\n    const posArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * (Math.random() * 10);\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({ size: 0.007 });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Luci\n    const light = new THREE.AmbientLight(0x404040);\n    scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 0, 0);\n    scene.add(directionalLight);\n\n// manichino\n    const loader = new GLTFLoader();\n    loader.load('/3dumanoide.glb', function (gltf) {\n    gltf.scene.scale.set(0.5, 0.5, 0.5); // Aumenta la scala se necessario\n    gltf.scene.position.set(0, 0, 0);\n    gltf.scene.rotation.y = Math.PI; // Ruota di 180 gradi se necessario\n    scene.add(gltf.scene);\n  }, undefined, function (error) {\n  console.error('An error happened while loading the model:', error);\n});\n\n\n\n\n\n    \nlet angoloMovimento = 0;\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n\n  // Calcola la nuova posizione del manichino basata sul movimento delle particelle\n  // Ad esempio, se le particelle si muovono in un cerchio, potresti fare:\n  const time = Date.now() * 0.001; // Tempo corrente in secondi\n  const radius = 5; // Raggio del movimento circolare\n  const speed = 1; // Velocità di movimento\n  const angle = time * speed; // Angolo di movimento basato sul tempo e sulla velocità\n\n  // Calcola la posizione x e z basata sull'angolo\n  const x = radius * Math.sin(angle);\n  const z = radius * Math.cos(angle);\n\n  // Aggiorna la posizione del manichino\n  if (umanoideRef.current) {\n    umanoideRef.current.position.x = x;\n    umanoideRef.current.position.z = z;\n  }\n\n      // Anima l'umanoide\n      if (umanoideRef.current) {\n        umanoideRef.current.rotation.y += 0.001;\n      }\n\n      // Anima il cubo\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.001;\n        cubeRef.current.rotation.y += 0.001;\n      }\n\n      // Anima le particelle\n      if (particlesMesh) {\n        particlesMesh.rotation.y += 0.001;\n      }\n\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize, false);\n\n    // Logica per rendere l'umanoide cliccabile\n    const onClick = (event) => {\n      const mouse = new THREE.Vector2(\n        (event.clientX / window.innerWidth) * 2 - 1,\n        -(event.clientY / window.innerHeight) * 2 + 1\n      );\n\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n\n      for (let i = 0; i < intersects.length; i++) {\n        if (intersects[i].object === umanoideRef.current) {\n          window.location.href = 'https://ia-liart-one.vercel.app/';\n          break;\n        }\n      }\n    };\n\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('click', onClick);\n      currentRef.removeChild(renderer.domElement);\n    };\n  }, [isScrolled]); // Non è necessario aggiungere ologrammaRef.current qui\n\n  return <div ref={mountRef} className=\"scene-container\" />;\n};\n\nexport default NeuralScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}